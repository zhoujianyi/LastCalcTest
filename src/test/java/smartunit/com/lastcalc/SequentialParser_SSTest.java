/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.lastcalc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.lastcalc.SequentialParser;
import com.lastcalc.TokenList;
import com.lastcalc.engines.BacktrackingParseEngine;
import com.lastcalc.engines.ParserPickerFactory;
import com.lastcalc.parsers.ParserContext;
import java.util.Map;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SequentialParser_SSTest extends SequentialParser_SSTest_scaffolding {
// allCoveredLines:[97, 99, 103, 105, 112, 115, 121, 122, 123, 125, 126, 127, 131, 133, 134, 136, 137, 138, 141, 145, 147, 148, 155, 159, 161, 162, 168, 176, 181, 185, 198, 215, 216, 217, 220, 224, 225, 228, 232]

  @Test(timeout = 4000)
  public void test_create_0()  throws Throwable  {
      //caseID:8ae6b4e23f008d76a1d34a945a564312
      //CoveredLines: [97, 99, 112, 112, 115, 115, 121, 122, 123, 125, 126, 127]
      //Assert: assertEquals(0, method_result.getLastParseStepCount());
      
      //mock parserPickerFactory0
      ParserPickerFactory parserPickerFactory0 = mock(ParserPickerFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      SequentialParser sequentialParser0 = new SequentialParser(parserPickerFactory0, parserPickerFactory0, parserPickerFactory0, 0L);
      
      //Call method: create
      SequentialParser sequentialParser1 = SequentialParser.create();
      
      //Test Result Assert
      assertEquals(0, sequentialParser1.getLastParseStepCount());
  }

  @Test(timeout = 4000)
  public void test_create_1()  throws Throwable  {
      //caseID:68ae7e6b20569a06d20eed285485f19f
      //CoveredLines: [103, 105, 112, 112, 115, 115, 121, 122, 123, 125, 126, 127, 131, 133, 134, 136, 137, 138]
      //Input_0_ParserContext: {}
      //Assert: assertEquals(0, method_result.getLastParseStepCount());
      
      //mock parserPickerFactory0
      ParserPickerFactory parserPickerFactory0 = mock(ParserPickerFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      SequentialParser sequentialParser0 = new SequentialParser(parserPickerFactory0, parserPickerFactory0, parserPickerFactory0, 6485L);
      //mock parserContext0
      ParserContext parserContext0 = mock(ParserContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: create
      SequentialParser sequentialParser1 = SequentialParser.create(parserContext0);
      
      //Test Result Assert
      assertEquals(0, sequentialParser1.getLastParseStepCount());
  }

  @Test(timeout = 4000)
  public void test_getLastParseStepCount_2()  throws Throwable  {
      //caseID:e8eaf904077508268f8401660e201185
      //CoveredLines: [112, 112, 115, 115, 121, 122, 123, 125, 126, 127, 228]
      //Assert: assertEquals(0, method_result);
      
      //mock parserPickerFactory0
      ParserPickerFactory parserPickerFactory0 = mock(ParserPickerFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      SequentialParser sequentialParser0 = new SequentialParser(parserPickerFactory0, parserPickerFactory0, parserPickerFactory0, 9765625L);
      
      //Call method: getLastParseStepCount
      int int0 = sequentialParser0.getLastParseStepCount();
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getUserDefinedKeywordMap_3()  throws Throwable  {
      //caseID:c3bd442367da64493f7861b3fff36a07
      //CoveredLines: [112, 112, 115, 115, 121, 122, 123, 125, 126, 127, 220]
      //Assert: assertEquals(0, method_result.size());
      
      //mock parserPickerFactory0
      ParserPickerFactory parserPickerFactory0 = mock(ParserPickerFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      SequentialParser sequentialParser0 = new SequentialParser(parserPickerFactory0, parserPickerFactory0, parserPickerFactory0, 0L);
      
      //Call method: getUserDefinedKeywordMap
      Map<String, Integer> map0 = sequentialParser0.getUserDefinedKeywordMap();
      
      //Test Result Assert
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test_getUserDefinedParsers_4()  throws Throwable  {
      //caseID:a42958dd84617c120f892bb2fb00e4b3
      //CoveredLines: [112, 112, 115, 115, 121, 122, 123, 125, 126, 127, 232]
      //Assert: assertNotNull(method_result);
      
      //mock parserPickerFactory0
      ParserPickerFactory parserPickerFactory0 = mock(ParserPickerFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      SequentialParser sequentialParser0 = new SequentialParser(parserPickerFactory0, parserPickerFactory0, parserPickerFactory0, 0L);
      
      //Call method: getUserDefinedParsers
      ParserPickerFactory parserPickerFactory1 = sequentialParser0.getUserDefinedParsers();
      
      //Test Result Assert
      assertNotNull(parserPickerFactory1);
  }

  @Test(timeout = 4000)
  public void test_parseNext_5()  throws Throwable  {
      //caseID:ab7e0b436b017007886dfbae69136bbf
      //CoveredLines: [112, 112, 115, 115, 131, 133, 134, 136, 137, 138, 141, 145, 147, 148, 155, 159, 161, 162, 185]
      //Input_0_String: 
      
      //mock parserPickerFactory0
      ParserPickerFactory parserPickerFactory0 = mock(ParserPickerFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock parserContext0
      ParserContext parserContext0 = mock(ParserContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      SequentialParser sequentialParser0 = new SequentialParser(parserPickerFactory0, parserPickerFactory0, parserPickerFactory0, 1023L, parserContext0);
      //mock tokenList0
      TokenList tokenList0 = mock(TokenList.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(4486).when(tokenList0).size();
      //mock tokenList1
      TokenList tokenList1 = mock(TokenList.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock backtrackingParseEngine0
      BacktrackingParseEngine backtrackingParseEngine0 = mock(BacktrackingParseEngine.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2030).when(backtrackingParseEngine0).getLastParseStepCount();
      doReturn(tokenList1).when(backtrackingParseEngine0).parseAndGetLastStep(any(com.lastcalc.TokenList.class) , any(com.lastcalc.parsers.ParserContext.class) , any(com.lastcalc.TokenList[].class));
      
      PrivateAccess.setVariable((Class<?>) SequentialParser.class, sequentialParser0, "parseEngine", (Object) backtrackingParseEngine0);
      
      PrivateAccess.setVariable((Class<?>) SequentialParser.class, sequentialParser0, "previousAnswer", (Object) tokenList0);
      
      //Call method: parseNext
      // Undeclared exception!
      try { 
        sequentialParser0.parseNext("");
      } catch(Throwable e) {
         verifyException("com.lastcalc.SequentialParser", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }

  @Test(timeout = 4000)
  public void test_processNextAnswer_6()  throws Throwable  {
      //caseID:7f5d86818d6b9de8546b3e0700ad654a
      //CoveredLines: [112, 112, 115, 115, 121, 122, 123, 125, 126, 127, 185, 198, 215, 216, 217]
      //Input_0_TokenList: {size=15 (-1)}
      
      //mock parserPickerFactory0
      ParserPickerFactory parserPickerFactory0 = mock(ParserPickerFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      SequentialParser sequentialParser0 = new SequentialParser(parserPickerFactory0, parserPickerFactory0, parserPickerFactory0, 0L);
      //mock tokenList0
      TokenList tokenList0 = mock(TokenList.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(15, (-1)).when(tokenList0).size();
      
      //Call method: processNextAnswer
      sequentialParser0.processNextAnswer(tokenList0);
      
      //Test Result Assert
      assertEquals(0, sequentialParser0.getLastParseStepCount());
  }

  @Test(timeout = 4000)
  public void test_quietParse_7()  throws Throwable  {
      //caseID:e957c3ead5871141f1b5623e83a970ab
      //CoveredLines: [112, 112, 115, 115, 121, 122, 123, 125, 126, 127, 181]
      //Input_0_TokenList: {}
      //Assert: assertNull(method_result);
      
      //mock parserPickerFactory0
      ParserPickerFactory parserPickerFactory0 = mock(ParserPickerFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      SequentialParser sequentialParser0 = new SequentialParser(parserPickerFactory0, parserPickerFactory0, parserPickerFactory0, 0L);
      //mock backtrackingParseEngine0
      BacktrackingParseEngine backtrackingParseEngine0 = mock(BacktrackingParseEngine.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) SequentialParser.class, sequentialParser0, "parseEngine", (Object) backtrackingParseEngine0);
      //mock tokenList0
      TokenList tokenList0 = mock(TokenList.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: quietParse
      TokenList tokenList1 = sequentialParser0.quietParse(tokenList0);
      
      //Test Result Assert
      assertNull(tokenList1);
  }

  @Test(timeout = 4000)
  public void test_setDumpSteps_8()  throws Throwable  {
      //caseID:ad7c30c4d91f52039845e82c02f4b28c
      //CoveredLines: [112, 112, 115, 115, 121, 122, 123, 125, 126, 127, 224, 225]
      //Input_0_boolean: true
      
      //mock parserPickerFactory0
      ParserPickerFactory parserPickerFactory0 = mock(ParserPickerFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      SequentialParser sequentialParser0 = new SequentialParser(parserPickerFactory0, parserPickerFactory0, parserPickerFactory0, 0L);
      
      //Call method: setDumpSteps
      sequentialParser0.setDumpSteps(true);
      
      //Test Result Assert
      assertEquals(0, sequentialParser0.getLastParseStepCount());
  }

  @Test(timeout = 4000)
  public void test_stripUDF_9()  throws Throwable  {
      //caseID:58667be6611d94fd62a0e3b4beae4d4c
      //CoveredLines: [112, 112, 115, 115, 131, 133, 134, 136, 137, 138, 168, 176]
      //Input_0_TokenList: {}
      //Assert: assertSame(method_result, tokenList0);
      
      //mock parserPickerFactory0
      ParserPickerFactory parserPickerFactory0 = mock(ParserPickerFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock parserContext0
      ParserContext parserContext0 = mock(ParserContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      SequentialParser sequentialParser0 = new SequentialParser(parserPickerFactory0, parserPickerFactory0, parserPickerFactory0, 2163L, parserContext0);
      //mock tokenList0
      TokenList tokenList0 = mock(TokenList.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: stripUDF
      TokenList tokenList1 = sequentialParser0.stripUDF(tokenList0);
      
      //Test Result Assert
      assertSame(tokenList1, tokenList0);
  }
}
